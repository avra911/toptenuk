<?php
/**
 * Magento
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Academic Free License (AFL 3.0)
 * that is bundled with this package in the file LICENSE_AFL.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/afl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@magentocommerce.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade Magento to newer
 * versions in the future. If you wish to customize Magento for your
 * needs please refer to http://www.magentocommerce.com for more information.
 *
 * @category    design
 * @package     base_default
 * @copyright   Copyright (c) 2012 Magento Inc. (http://www.magentocommerce.com)
 * @license     http://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
 */

/**
 * Product view template
 *
 * @see Mage_Catalog_Block_Product_View
 * @see Mage_Review_Block_Product_View
 */
$otherconfig = Mage::getStoreConfig('mtcolinusadmin/otherconfig');
$config = Mage::getStoreConfig('mtcolinusadmin/static_config');
?>
<?php $_helper = $this->helper('catalog/output'); ?>
<?php $_product = $this->getProduct(); ?>
<?php
    $_product = $this->getProduct();
    foreach ($_product->getOptions() as $o) {
        $optionType = $o->getType();
        if ($optionType == 'file') {
            $oType = true;
        }
    }
    ?>

<script type="text/javascript">
    var optionsPrice = new Product.OptionsPrice(<?php echo $this->getJsonConfig() ?>);
</script>
  
<div id="messages_product_view"><?php echo $this->getMessagesBlock()->getGroupedHtml() ?></div>
<div class="product-view ">
    <div class="product-essential row-fluid show-grid">
    <form action="<?php echo $this->getSubmitUrl($_product) ?>" method="post" id="product_addtocart_form"<?php if($_product->getOptions()): ?> enctype="multipart/form-data"<?php endif; ?>>
        <input type="hidden" name="product" value="<?php echo $_product->getId() ?>" />
		<input type="hidden" name="related_product" id="related-products-field" value="" />

        <div class="product-img-box span5 no-margin">
        	<div class="mt-media">
                <?php echo $this->helper('mtcolinusadmin')->getLabel($_product);  ?>
                <?php echo $this->getChildHtml('media') ?>
            </div>
        </div>        
        
        <div class="product-shop <?php if ($config['static_product_view_sidebar']!=="" && $config['enabled_product_view_static']>0) : ?>span4 has-sidebar<?php else: ?>span7 no-sidebar<?php endif; ?>">
        	<?php if ( !($_product->getTypeInstance(true)->hasRequiredOptions($_product) || $_product->isGrouped()) ) { ?>
        	<input type="hidden" id="optioncheck" name="optioncheck" value="0"/>
        	<?php }else{?>
        	<input type="hidden" id="optioncheck" name="optioncheck" value="1"/>
        	<?php }?>
			
			<div class="item-column">
				<div class="product-name">
					<h1><?php echo $_helper->productAttribute($_product, $_product->getName(), 'name') ?></h1>
				</div>
				<?php echo $this->getReviewsSummaryHtml($_product, false, true)?>
				<div class="title-divider">
					<span>&nbsp;</span>
				</div>
			</div>
			
			<div class="item-column">
				<?php echo $this->getTierPriceHtml() ?>				
				<?php echo $this->getChildHtml('alert_urls') ?>
				<?php echo $this->getChildHtml('product_type_data') ?>				
				<?php echo $this->getChildHtml('extrahint') ?>
						
				<div class="title-divider">
					<span>&nbsp;</span>
				</div>
            </div>
			            
			<div class="item-column">
				<?php if ($_product->getShortDescription()):?>
					<div class="short-description">
						<h3><?php echo $this->__('Quick Overview') ?></h3>
						<div class="std"><?php echo $_helper->productAttribute($_product, nl2br($_product->getShortDescription()), 'short_description') ?></div>
					</div>
				<?php endif;?>
				
				<div class="title-divider">
					<span>&nbsp;</span>
				</div>
			</div>
            

            <?php if (!$this->hasOptions()):?>
                <div class="add-to-box">
                    <?php if($_product->isSaleable()): ?>
                        <?php echo $this->getChildHtml('addtocart') ?>
                        <?php if( $this->helper('wishlist')->isAllow() || $_compareUrl=$this->helper('catalog/product_compare')->getAddUrl($_product)): ?>
                            <span class="or" style="display:none;"><?php echo $this->__('OR') ?></span>
                        <?php endif; ?>
                    <?php endif; ?>
                    <?php echo $this->getChildHtml('addto') ?>
                </div>
                <?php echo $this->getChildHtml('extra_buttons') ?>
            <?php elseif (!$_product->isSaleable()): ?>
                <div class="add-to-box">
                    <?php echo $this->getChildHtml('addto') ?>
                </div>
            <?php endif; ?>
            <?php echo $this->getChildHtml('other');?>

            <?php if ($_product->isSaleable() && $this->hasOptions()):?>
                <?php echo $this->getChildChildHtml('container1', '', true, true) ?>
            <?php endif;?>            
            
            <?php if ($_product->isSaleable() && $this->hasOptions()):?>
                <?php echo $this->getChildChildHtml('container2', '', true, true) ?>
            <?php endif;?>
        </div>

        <!-- <div class="span3 hidden-phone viewquicklook">
			<div class="products-view-sidebar">
                <?php echo $this->getLayout()->createBlock('cms/block')->setBlockId('product_static')->toHtml() ?>
            </div>
		</div> -->
        <?php echo $this->getChildHtml('product_view_static') ?>        
    </form>
    <script type="text/javascript">
    //<![CDATA[
        var productAddToCartForm = new VarienForm('product_addtocart_form'); 
		<?php if($otherconfig['enabled_ajax'] && $oType == false){?>
        productAddToCartForm.submit = function(button, url) {  
            if (this.validator.validate()) {
                var form = this.form;
                var oldUrl = form.action;

                if (url) {
                   form.action = url;
                }
                var e = null;
                if (!url) {
    				url = $mtkb('#product_addtocart_form').attr('action');
    			}
				if($mtkb('body').find('.viewquickloook').val()>0){
   				 	try {
	                    this.form.submit();
	                } catch (e) {
		                
	                }
        		}else{  
					url = url.replace("checkout/cart","mtcolinusadmin/index"); // New Code
					var data = $mtkb('#product_addtocart_form').serialize(); 
					data += '&isAjax=1';  
					try {
						if($mtkb('#optioncheck').val()==0){ 
							if($mtkb('#qty').val()==0){ 
								$mtkb("span.textrepuired").html('<?php echo $this->__('The quantity not zero!');?>'); 
							}else{
								$mtkb("span.textrepuired").html('');
								$mtkb('.cart-loading').show();
								$mtkb('.cart').hide();
								$mtkb.ajax( {
									url : url,
									dataType : 'json',
									type : 'post',
									data : data,
									success : function(data) { 
										parent.setAjaxData(data,true);
										$mtkb('.cart-loading').hide();
										$mtkb('.cart').show();
										parent.showMessage(data.message);
                	                	parent.ajaxReload(data,true); 
										if (button && button != 'undefined') {
											button.disabled = false;
										}
									}
								});
							}  
						}else{
							$mtkb('.cart-loading').show();
		    				$mtkb('.cart').hide();
							$mtkb.ajax( {
								url : url,
								dataType : 'json',
								type : 'post',
								data : data,
								success : function(data) { 
									parent.setAjaxData(data,true);
									$mtkb('.cart-loading').hide();
									parent.removeLoading();
									$mtkb('.cart').show();
									parent.showMessage(data.message);
            	               	 	parent.ajaxReload(data,true); 
								}
							});
						}
					} catch (e) {
					}
				}
                this.form.action = oldUrl;
                if (e) {
                    throw e;
                }

            }
        }.bind(productAddToCartForm);
		<?php }else{?>
		productAddToCartForm.submit = function(button, url) {
            if (this.validator.validate()) {
                var form = this.form;
                var oldUrl = form.action;

                if (url) {
                   form.action = url;
                }
                var e = null;
                try {
                    this.form.submit();
                } catch (e) {
                }
                this.form.action = oldUrl;
                if (e) {
                    throw e;
                }

                if (button && button != 'undefined') {
                    button.disabled = true;
                }
            }
        }.bind(productAddToCartForm);
		<?php }?>
        productAddToCartForm.submitLight = function(button, url){
            if(this.validator) {
                var nv = Validation.methods;
                delete Validation.methods['required-entry'];
                delete Validation.methods['validate-one-required'];
                delete Validation.methods['validate-one-required-by-name'];
                // Remove custom datetime validators
                for (var methodName in Validation.methods) {
                    if (methodName.match(/^validate-datetime-.*/i)) {
                        delete Validation.methods[methodName];
                    }
                }

                if (this.validator.validate()) {
                    if (url) {
                        this.form.action = url;
                    }
                    this.form.submit();
                }
                Object.extend(Validation.methods, nv);
            }
        }.bind(productAddToCartForm);
        /*update cart*/
        var productUpdateCartForm = new VarienForm('product_addtocart_form'); 
        productUpdateCartForm.submit = function(button, url) {
            if (this.validator.validate()) {
                var form = this.form;
                var oldUrl = form.action;

                if (url) {
                   form.action = url;
                }
                var e = null;
                try {
                    this.form.submit();
                } catch (e) {
                }
                this.form.action = oldUrl;
                if (e) {
                    throw e;
                }

                if (button && button != 'undefined') {
                    button.disabled = true;
                }
            }
        }.bind(productUpdateCartForm);
        productUpdateCartForm.submitLight = function(button, url){
            if(this.validator) {
                var nv = Validation.methods;
                delete Validation.methods['required-entry'];
                delete Validation.methods['validate-one-required'];
                delete Validation.methods['validate-one-required-by-name'];
                // Remove custom datetime validators
                for (var methodName in Validation.methods) {
                    if (methodName.match(/^validate-datetime-.*/i)) {
                        delete Validation.methods[methodName];
                    }
                }

                if (this.validator.validate()) {
                    if (url) {
                        this.form.action = url;
                    }
                    this.form.submit();
                }
                Object.extend(Validation.methods, nv);
            }
        }.bind(productUpdateCartForm);
    //]]>
    </script>
    </div>

    <div class="product-collateral">
        <?php echo $this->getChildHtml('info_tabs') ?>
        <?php echo $this->getChildHtml('product_additional_data') ?>
    </div>
    <?php echo $this->getChildHtml('related_products') ?>
</div>
